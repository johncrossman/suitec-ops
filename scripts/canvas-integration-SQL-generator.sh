#!/bin/bash

##############################################################
# This script produces SQL (UPDATE or INSERT) with purpose of
# populating the SuiteC 'canvas' table with proper LTI keys.
# SuiteC customers provide an API Key and, in return, we
# give them the LTI tokens generated by this script.
##############################################################

trap "exit 1" TERM
export THIS_PID=$$

to_boolean() {
  [[ "${1}" =~ ^([yY][eE][sS]|[yY])$ ]] && echo 'true' || echo 'false'
}

generate_token() {
  echo "$(cat /dev/urandom | env LC_CTYPE=C tr -dc 'A-Za-z0-9' | fold -w 32 | head -n 1)"
}

echo2() {
  echo "${1}" >&2
}

read_input() {
  label="${1}"
  is_required="${2}"
  read -p "${label} " input_value

  if [[ -z "${is_required}" ]] || [[ "${is_required}" = '0' ]]; then
    if [[ -z "${input_value}" ]]; then
      echo2; echo2 "[ERROR] Input is required. Please retry."; echo2
      kill -s TERM ${THIS_PID}
    fi
  fi

  echo "${input_value}"
}

echo
echo "Welcome to SuiteC's Canvas integration SQL generator. This script"
echo "generates SQL: an UPDATE or INSERT statement, based on your input."
echo "The SQL targets the 'canvas' table."
echo; echo "Let us begin..."; echo

is_update="$(read_input 'Are you updating the LTI Key and Secret of an existing Canvas integration? [Y/n]')"
name="$(read_input 'Name of Canvas integration?')"

if [[ "$(to_boolean ${is_update})" = 'true' ]]; then
  sql_file="UPDATE-Canvas-LTI-tokens_${name// /_}.sql"

  is_optional='(Optional. Type RETURN to skip.)'
  api_key="$(read_input "Canvas API key? ${is_optional}" 1)"
  use_https="$(read_input "Use HTTPS? [Y/n] ${is_optional}" 1)"
  canvas_api_domain="$(read_input "What is the Canvas API domain? ${is_optional}" 1)"
  logo="$(read_input "Logo URL? ${is_optional}" 1)"
  supports_custom_messaging="$(read_input "Partner supports Canvas customization? [Y/n] ${is_optional}" 1)"

  read -d '' sql_prefix <<SQL
UPDATE
  canvas
SET
SQL
  [ ! -z "${api_key}" ] && sql_prefix=$(printf "${sql_prefix}\n  api_key='${api_key}'")
  [ ! -z "${use_https}" ] && sql_prefix=$(printf "${sql_prefix}\n  use_https=$(to_boolean ${use_https})")
  [ ! -z "${canvas_api_domain}" ] && sql_prefix=$(printf "${sql_prefix}\n  canvas_api_domain='${canvas_api_domain}'")
  [ ! -z "${logo}" ] && sql_prefix=$(printf "${sql_prefix}\n  logo='${logo}'")
  [ ! -z "${supports_custom_messaging}" ] && sql_prefix=$(printf "${sql_prefix}\n  supports_custom_messaging=$(to_boolean ${supports_custom_messaging})")

  read -d '' sql <<SQL
  ${sql_prefix}
  lti_key='$(generate_token)',
  lti_secret='$(generate_token)'
WHERE
  name='${name}'
SQL

else
  sql_file="INSERT-Canvas-LTI-data_${name// /_}.sql"
  echo; canvas_api_domain="$(read_input 'What is the Canvas API domain?')"
  echo; api_key="$(read_input 'Canvas API key?')"
  echo; use_https="$(read_input 'Use HTTPS? [Y/n]')"
  echo; logo="$(read_input 'Logo URL?')"
  echo; supports_custom_messaging="$(read_input 'Partner supports Canvas customization? [Y/n]')"

  read -d '' sql <<SQL
INSERT INTO canvas
(
  canvas_api_domain,
  api_key,
  lti_key,
  lti_secret,
  use_https,
  name,
  logo,
  created_at,
  updated_at,
  supports_custom_messaging
)
VALUES
(
  '${canvas_api_domain}',
  '${api_key}',
  '$(generate_token)',
  '$(generate_token)',
  $(to_boolean "${use_https}"),
  '${name}',
  '${logo}',
  now(),
  now(),
  $(to_boolean "${supports_custom_messaging}")
)
SQL

fi

# NOTE: Writing the SQL to a file makes it easier for dev to run via psql.

rm -f "${sql_file}"

echo; echo "--"; echo
echo "${sql}" | tee "${sql_file}"
echo; echo "--"; echo

echo; echo "The SQL above was written to ${sql_file}; use 'psql -f' to execute that file."; echo

exit 0
